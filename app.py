import os
import time
import requests
import warnings
import hashlib
import random
import re
import json
import threading
from datetime import datetime, timedelta
from flask import Flask, request, jsonify, render_template_string
from flask_cors import CORS

warnings.filterwarnings('ignore')

app = Flask(__name__)
CORS(app)

# Configura√ß√£o
OLLAMA_BASE_URL = os.getenv("OLLAMA_URL", "http://localhost:11434")
OLLAMA_MODEL = "gemma3:1b"
RENDER_URL = os.getenv("RENDER_URL", "")

# Cache e dados - INICIALIZA√á√ÉO CORRIGIDA
CACHE_RESPOSTAS = {}
KNOWLEDGE_BASE = {}
HISTORICO_CONVERSAS = []  # Inicializa√ß√£o expl√≠cita
PING_INTERVAL = 300

# Lock para thread safety
import threading
historico_lock = threading.Lock()

# Auto-ping para manter servidor ativo
def auto_ping():
    while True:
        try:
            if RENDER_URL:
                requests.get(f"{RENDER_URL}/health", timeout=10)
                print(f"üèì Auto-ping realizado: {datetime.now().strftime('%H:%M:%S')}")
        except Exception as e:
            print(f"‚ùå Erro no auto-ping: {e}")
        time.sleep(PING_INTERVAL)

# Inicia thread de auto-ping
threading.Thread(target=auto_ping, daemon=True).start()

# Personalidade - Janine (SIMPLIFICADA)
SAUDACOES = [
    "Ol√°! Sou a Janine",
    "Oi! Como posso ajudar?",
    "Seja bem-vindo!",
    "Oi, tudo bem?",
    "Ol√°! Em que posso ajudar?",
    "Oi! Bem-vindo!"
]

DESPEDIDAS = [
    "At√© logo! Vibra√ß√µes Positivas!",
    "Tchau! Vibra√ß√µes Positivas!",
    "At√© mais! Vibra√ß√µes Positivas!",
    "Nos falamos! Vibra√ß√µes Positivas!"
]

ELOGIOS_IA_RESPOSTAS = [
    "Obrigada! Fico feliz em ajudar!",
    "Que bom! Estou aqui para isso!",
    "Muito obrigada! √â um prazer ajudar!",
    "Obrigada! Adoro poder ser √∫til!"
]

ELOGIOS_ESPACO_RESPOSTAS = [
    "Que bom que gostou! Nosso espa√ßo √© muito especial!",
    "Obrigada! O ambiente foi feito com muito carinho!",
    "Fico feliz! A natureza aqui √© √∫nica!",
    "Que alegria! Nosso espa√ßo tem essa magia!"
]

# NOVA FUN√á√ÉO: Detecta perguntas que precisam de Alexandre
def precisa_contatar_alexandre(pergunta):
    """Detecta perguntas que a IA n√£o pode responder e precisam de Alexandre"""
    try:
        p = pergunta.lower().strip()
        
        # Palavras-chave que indicam necessidade de contato direto
        palavras_alexandre = [
            # Datas espec√≠ficas
            "data", "datas", "dispon√≠vel", "disponivel", "livre", "ocupado",
            "agenda", "agendado", "calend√°rio", "calendario", "quando posso",
            "que dia", "dia dispon√≠vel", "fim de semana livre",
            "pr√≥ximo s√°bado", "proximo sabado", "pr√≥ximo domingo", "proximo domingo",
            "janeiro", "fevereiro", "mar√ßo", "abril", "maio", "junho",
            "julho", "agosto", "setembro", "outubro", "novembro", "dezembro",
            "2024", "2025", "2026",
            
            # Disponibilidade espec√≠fica
            "est√° livre", "esta livre", "tem vaga", "posso marcar para",
            "quero marcar para", "reservar para", "agendar para",
            "dia 15", "dia 20", "dia 25", "dia 30", "dia 31",
            
            # Detalhes espec√≠ficos que s√≥ Alexandre sabe
            "contrato", "clausulas", "cl√°usulas", "pagamento", "forma de pagamento",
            "entrada", "sinal", "parcelas", "desconto", "promo√ß√£o", "promocao",
            "tabela completa", "lista de pre√ßos", "pre√ßo exato", "valor exato",
            
            # Personaliza√ß√µes espec√≠ficas
            "posso trazer", "pode trazer", "decora√ß√£o", "decoracao", "som",
            "equipamento", "mesa", "cadeira", "banheiro", "cozinha",
            "estacionamento", "seguran√ßa", "energia el√©trica", "eletrica",
            
            # Informa√ß√µes t√©cnicas
            "regulamento", "regras espec√≠ficas", "regras especificas",
            "documentos", "alvar√°", "alvara", "licen√ßa", "licenca",
            "bombeiros", "vigil√¢ncia", "vigilancia"
        ]
        
        # Se tem qualquer palavra que precisa de Alexandre
        if any(palavra in p for palavra in palavras_alexandre):
            return True
        
        # Perguntas muito espec√≠ficas (mais de 15 palavras sobre detalhes)
        if len(p.split()) > 15:
            palavras_detalhadas = ["como", "quando", "onde", "quanto", "qual", "posso", "pode"]
            if any(palavra in p for palavra in palavras_detalhadas):
                return True
        
        return False
        
    except Exception as e:
        print(f"‚ùå Erro na detec√ß√£o Alexandre: {e}")
        return False

# Resposta padr√£o para contatar Alexandre
def gerar_resposta_contatar_alexandre(pergunta):
    """Gera resposta direcionando para Alexandre"""
    try:
        p = pergunta.lower().strip()
        
        # Respostas espec√≠ficas baseadas no tipo de pergunta
        if any(palavra in p for palavra in ["data", "datas", "dispon√≠vel", "livre", "agenda", "quando"]):
            return """Para saber datas dispon√≠veis, entre em contato diretamente com Alexandre!

WhatsApp: 21 98124-6196

Alexandre tem a agenda completa e pode:
- Verificar datas livres
- Confirmar disponibilidade
- Fazer sua reserva na hora

Ele responde rapidamente e vai cuidar de tudo para voc√™!

Vibra√ß√µes Positivas!"""

        elif any(palavra in p for palavra in ["pre√ßo", "valor", "pagamento", "contrato", "desconto"]):
            return """Para informa√ß√µes detalhadas sobre valores e pagamento, fale com Alexandre!

WhatsApp: 21 98124-6196

Alexandre vai explicar:
- Valores completos
- Formas de pagamento
- Condi√ß√µes especiais
- Tudo sobre o contrato

Cada evento √© √∫nico, ent√£o ele faz um atendimento personalizado!

Vibra√ß√µes Positivas!"""

        elif any(palavra in p for palavra in ["trazer", "decora√ß√£o", "som", "equipamento"]):
            return """Para detalhes sobre o que pode trazer e estrutura dispon√≠vel, converse com Alexandre!

WhatsApp: 21 98124-6196

Alexandre vai esclarecer:
- O que voc√™ pode trazer
- Equipamentos dispon√≠veis
- Regras do espa√ßo
- Estrutura completa

Ele conhece todos os detalhes e vai te orientar!

Vibra√ß√µes Positivas!"""

        else:
            # Resposta geral para outras perguntas espec√≠ficas
            return """Para essa informa√ß√£o espec√≠fica, √© melhor falar diretamente com Alexandre!

WhatsApp: 21 98124-6196

Alexandre tem todas as informa√ß√µes detalhadas e pode:
- Responder suas d√∫vidas espec√≠ficas
- Dar orienta√ß√µes personalizadas
- Cuidar de todos os detalhes

Ele √© super atencioso e vai te ajudar com tudo!

Vibra√ß√µes Positivas!"""
            
    except Exception as e:
        print(f"‚ùå Erro na resposta Alexandre: {e}")
        return """Para essa informa√ß√£o, entre em contato com Alexandre!

WhatsApp: 21 98124-6196

Ele tem todas as informa√ß√µes e vai te ajudar!

Vibra√ß√µes Positivas!"""

# Sistema de an√°lise de inten√ß√£o - Janine Melhorado
def analisar_intencao(pergunta):
    """Analisa a inten√ß√£o das perguntas sobre o espa√ßo de festas"""
    try:
        p = pergunta.lower().strip()
        
        # PRIMEIRA VERIFICA√á√ÉO: Se precisa contatar Alexandre
        if precisa_contatar_alexandre(pergunta):
            return "contatar_alexandre"
        
        intencoes = {
            "saudacao": 0,
            "despedida": 0,
            "elogio_ia": 0,
            "elogio_espaco": 0,
            "sobre_ia": 0,
            "sobre_espaco": 0,
            "orcamento": 0,
            "contato": 0,
            "visita": 0,
            "localizacao": 0,
            "horarios": 0,
            "capacidade": 0,
            "eventos": 0,
            "missao": 0,
            "marcar_evento": 0,
            "contatar_alexandre": 0,  # NOVA INTEN√á√ÉO
            "geral": 0
        }
        
        # PALAVRAS-CHAVE EXPANDIDAS
        
        # NOVA CATEGORIA: Marcar Evento
        palavras_marcar_evento = [
            "marcar um evento", "quero marcar", "vou marcar", "preciso marcar",
            "quero um evento", "vou querer um evento", "preciso de um evento",
            "quero fazer uma festa", "vou fazer uma festa", "preciso fazer uma festa",
            "quero agendar", "vou agendar", "preciso agendar",
            "quero reservar", "vou reservar", "preciso reservar",
            "tenho interesse", "estou interessado", "gostaria de fazer",
            "como fa√ßo", "como marco", "como reservo", "como contrato",
            "quero fazer", "vou fazer", "preciso fazer", "gostaria",
            "posso marcar", "posso fazer", "posso agendar", "posso reservar",
            "queria fazer", "queria marcar", "queria agendar"
        ]
        
        # Sobre a IA
        palavras_sobre_ia = [
            "janine", "ai", "inteligencia artificial", "o que voc√™ √©", 
            "quem √© voc√™", "voc√™ √© uma ia", "como funciona", "que ia √© essa",
            "para que serve", "o que faz", "sua fun√ß√£o"
        ]
        
        # Sobre o Espa√ßo
        palavras_sobre_espaco = [
            "sobre o espa√ßo", "sobre voc√™s", "quem s√£o", "empresa", "neg√≥cio",
            "espa√ßo de festas", "sobre o local", "hist√≥ria", "como come√ßou"
        ]
        
        # Or√ßamento
        palavras_orcamento = [
            "or√ßamento", "pre√ßo", "valor", "quanto custa", "custo", "or√ßar",
            "tabela de pre√ßos", "valores", "cota√ß√£o", "quanto fica", "pre√ßos",
            "quanto sai", "investimento", "taxa", "pacote"
        ]
        
        # Contato
        palavras_contato = [
            "contato", "whatsapp", "telefone", "numero", "falar", "ligar",
            "alexandre", "responsavel", "dono", "conversar", "entrar em contato",
            "whats", "zap", "chamar"
        ]
        
        # Visita
        palavras_visita = [
            "visita", "conhecer", "ver", "visitar", "mostrar", "agendar visita",
            "ir ai", "ir a√≠", "ir l√°", "conhecer o espa√ßo", "ver o local"
        ]
        
        # Localiza√ß√£o
        palavras_localizacao = [
            "endere√ßo", "onde fica", "localiza√ß√£o", "local", "vargem grande",
            "cabungui", "pacu√≠", "rio de janeiro", "rj", "como chegar",
            "fica onde", "estrada"
        ]
        
        # Hor√°rios
        palavras_horarios = [
            "horario", "hor√°rios", "que horas", "funcionamento", "aberto",
            "das 9h", "19h", "manh√£", "tarde", "noite", "fim de semana",
            "sabado", "domingo", "quando funciona"
        ]
        
        # Capacidade
        palavras_capacidade = [
            "capacidade", "quantas pessoas", "100 pessoas", "100 convidados",
            "cabem quantas", "lota√ß√£o", "m√°ximo", "limite", "comporta"
        ]
        
        # Eventos
        palavras_eventos = [
            "festa", "evento", "aniversario", "casamento", "formatura", "batizado",
            "ch√°", "confraterniza√ß√£o", "celebra√ß√£o", "comemora√ß√£o", "reuni√£o familiar",
            "tipos de festa", "que eventos", "festas familiares"
        ]
        
        # Miss√£o
        palavras_missao = [
            "miss√£o", "objetivo", "proposta", "filosofia", "unir familias",
            "energia da natureza", "momentos inesquec√≠veis", "porque escolher"
        ]
        
        # Elogio √† IA
        palavras_elogio_ia = [
            "voc√™ √© boa", "voc√™ √© √≥tima", "ia boa", "ia incr√≠vel", "voc√™ ajuda bem",
            "gostei de voc√™", "voc√™ √© legal", "ia legal", "ia eficiente", "boa ia",
            "janine boa", "janine legal"
        ]
        
        # Elogio ao Espa√ßo
        palavras_elogio_espaco = [
            "espa√ßo lindo", "lugar bonito", "espa√ßo incr√≠vel", "ambiente lindo",
            "local perfeito", "espa√ßo maravilhoso", "lugar show", "ambiente show",
            "espa√ßo top", "local top", "lugar lindo", "energia boa", "vibra√ß√£o boa"
        ]
        
        # Sauda√ß√£o
        palavras_saudacao = [
            "oi", "ol√°", "ola", "hey", "eai", "e ai", "fala", "bom dia", "boa tarde",
            "boa noite", "tudo bem", "beleza", "como vai", "seja bem vindo"
        ]
        
        # Despedida
        palavras_despedida = [
            "tchau", "bye", "at√© logo", "at√© mais", "ate mais", "nos falamos",
            "obrigado", "obrigada", "valeu", "at√© breve", "at√© a pr√≥xima"
        ]
        
        # CONTAGEM COM PESOS
        
        # PRIORIDADE M√ÅXIMA para marcar evento
        for palavra in palavras_marcar_evento:
            if palavra in p:
                intencoes["marcar_evento"] += 8
        
        for palavra in palavras_sobre_ia:
            if palavra in p:
                intencoes["sobre_ia"] += 5
        
        for palavra in palavras_sobre_espaco:
            if palavra in p:
                intencoes["sobre_espaco"] += 5
        
        for palavra in palavras_orcamento:
            if palavra in p:
                intencoes["orcamento"] += 6
        
        for palavra in palavras_contato:
            if palavra in p:
                intencoes["contato"] += 6
        
        for palavra in palavras_visita:
            if palavra in p:
                intencoes["visita"] += 5
        
        for palavra in palavras_localizacao:
            if palavra in p:
                intencoes["localizacao"] += 5
        
        for palavra in palavras_horarios:
            if palavra in p:
                intencoes["horarios"] += 5
        
        for palavra in palavras_capacidade:
            if palavra in p:
                intencoes["capacidade"] += 5
        
        for palavra in palavras_eventos:
            if palavra in p:
                intencoes["eventos"] += 4
        
        for palavra in palavras_missao:
            if palavra in p:
                intencoes["missao"] += 5
        
        for palavra in palavras_elogio_ia:
            if palavra in p:
                intencoes["elogio_ia"] += 6
        
        for palavra in palavras_elogio_espaco:
            if palavra in p:
                intencoes["elogio_espaco"] += 6
        
        for palavra in palavras_saudacao:
            if palavra in p:
                intencoes["saudacao"] += 4
        
        for palavra in palavras_despedida:
            if palavra in p:
                intencoes["despedida"] += 4
        
        # Retorna a inten√ß√£o com maior score
        intencao_principal = max(intencoes, key=intencoes.get)
        score_principal = intencoes[intencao_principal]
        
        return intencao_principal if score_principal > 1 else "geral"
    
    except Exception as e:
        print(f"‚ùå Erro na an√°lise de inten√ß√£o: {e}")
        return "geral"

# Base de conhecimento - Janine EXPANDIDA E SIMPLIFICADA
def carregar_conhecimento_especializado():
    global KNOWLEDGE_BASE
    
    try:
        KNOWLEDGE_BASE = {
            "saudacao": {
                "resposta": """Ol√°! Sou a Janine!

Ajudo com informa√ß√µes sobre nosso espa√ßo para festas em Vargem Grande.

Posso te ajudar com:
- Or√ßamentos (WhatsApp: 21 98124-6196)
- Agendamento de visitas
- Festas para at√© 100 pessoas
- Localiza√ß√£o em Vargem Grande
- Hor√°rios: 8h √†s 18h (s√°bado ou domingo)

Em que posso ajudar voc√™?

Vibra√ß√µes Positivas!""",
                "keywords": ["oi", "ola", "hey", "bom dia", "boa tarde", "tudo bem"]
            },
            
            "despedida": {
                "resposta": random.choice(DESPEDIDAS),
                "keywords": ["tchau", "bye", "at√© logo", "obrigado", "valeu"]
            },
            
            "sobre_ia": {
                "resposta": """Sou a Janine!

Sou uma intelig√™ncia artificial criada para ajudar fam√≠lias com eventos especiais em nosso espa√ßo em Vargem Grande.

Posso te ajudar com:
- Or√ßamentos: 21 98124-6196 (Alexandre)
- Agendar visitas para conhecer o espa√ßo
- Informa√ß√µes sobre festas at√© 100 pessoas
- Localiza√ß√£o: Vargem Grande - RJ
- Hor√°rios: 8h √†s 18h (s√°bado ou domingo)

Nossa miss√£o: Unir fam√≠lias com a energia da natureza!

Como posso te ajudar hoje?

Vibra√ß√µes Positivas!""",
                "keywords": ["janine", "o que voc√™ √©", "quem √© voc√™", "para que serve"]
            },

            "sobre_espaco": {
                "resposta": """Sobre nosso espa√ßo:

Local: Estrada do Cabungui, 772, Vargem Grande - RJ
Para festas e eventos familiares
At√© 100 convidados

Nossa miss√£o:
Unir fam√≠lias para momentos especiais com a energia da natureza!

Diferenciais:
- Energia da natureza em Vargem Grande
- Ambiente familiar e acolhedor
- Apenas um evento por fim de semana
- Foco total na sua festa

A energia deste ambiente faz toda diferen√ßa no seu evento!

Quer saber sobre or√ßamentos ou visitas?

Vibra√ß√µes Positivas!""",
                "keywords": ["sobre o espa√ßo", "sobre voc√™s", "empresa", "neg√≥cio"]
            },
            
            "elogio_ia": {
                "resposta": random.choice(ELOGIOS_IA_RESPOSTAS),
                "keywords": ["voc√™ √© boa", "ia boa", "voc√™ ajuda bem", "gostei de voc√™", "janine boa"]
            },
            
            "elogio_espaco": {
                "resposta": random.choice(ELOGIOS_ESPACO_RESPOSTAS),
                "keywords": ["espa√ßo lindo", "lugar bonito", "ambiente lindo", "local perfeito"]
            },

            # NOVA RESPOSTA PARA CONTATAR ALEXANDRE
            "contatar_alexandre": {
                "resposta": gerar_resposta_contatar_alexandre,  # Fun√ß√£o din√¢mica
                "keywords": ["data", "dispon√≠vel", "pre√ßo espec√≠fico", "detalhes"]
            },

            # NOVA RESPOSTA PARA MARCAR EVENTOS
            "marcar_evento": {
                "resposta": """Que √≥timo! Vou te ajudar a marcar seu evento!

Para marcar sua festa, √© simples:

1. Chame Alexandre no WhatsApp: 21 98124-6196
2. Conte sobre sua festa:
   - Que tipo de evento (anivers√°rio, casamento, etc.)
   - Quantos convidados (at√© 100 pessoas)
   - Data desejada (s√°bado ou domingo)

3. Alexandre vai fazer seu or√ßamento personalizado

Informa√ß√µes importantes:
- Hor√°rio: 8h √†s 18h
- Local: Vargem Grande - RJ
- Apenas um evento por fim de semana
- Ambiente familiar com energia da natureza

Tamb√©m pode agendar uma visita para conhecer o espa√ßo!

Chame Alexandre agora: 21 98124-6196

Vibra√ß√µes Positivas!""",
                "keywords": ["marcar evento", "quero evento", "fazer festa", "agendar", "reservar"]
            },
            
            "orcamento": {
                "resposta": """Or√ßamentos:

Para seu or√ßamento personalizado:
WhatsApp: 21 98124-6196 (Alexandre)

Cada evento √© √∫nico, Alexandre faz or√ßamento sob medida considerando:
- Tipo de evento
- N√∫mero de convidados (at√© 100 pessoas)
- Data escolhida (s√°bado ou domingo)
- Hor√°rio: 8h √†s 18h

Vantagens:
- Apenas um evento por fim de semana
- Localiza√ß√£o em Vargem Grande
- Energia da natureza

Entre em contato pelo WhatsApp para seu or√ßamento!

Vibra√ß√µes Positivas!""",
                "keywords": ["or√ßamento", "pre√ßo", "valor", "quanto custa", "custo"]
            },

            "contato": {
                "resposta": """Contato:

WhatsApp: 21 98124-6196 (Alexandre)

Alexandre ajuda com:
- Or√ßamentos personalizados
- Agendamento de visitas
- Planejamento de eventos familiares
- Informa√ß√µes sobre o espa√ßo

Como entrar em contato:
- Chame no WhatsApp: 21 98124-6196
- Diga que soube pela Janine
- Conte sobre seu evento
- Receba atendimento personalizado

Alexandre responde rapidamente durante o dia.

A equipe est√° pronta para seu evento especial!

Vibra√ß√µes Positivas!""",
                "keywords": ["contato", "whatsapp", "telefone", "alexandre", "falar", "ligar"]
            },
            
            "visita": {
                "resposta": """Visitas ao espa√ßo:

Para agendar sua visita:
WhatsApp: 21 98124-6196 (Alexandre)

O que voc√™ ver√°:
- Ambiente natural em Vargem Grande
- Estrutura completa para festas
- Energia especial da natureza
- Espa√ßo para at√© 100 convidados

Localiza√ß√£o:
Estrada do Cabungui, 772
Vargem Grande - Rio de Janeiro

Por que visitar:
- Sentir a energia √∫nica do ambiente
- Conhecer nossa estrutura completa
- Tirar d√∫vidas pessoalmente
- Ver sua festa dos sonhos

A energia deste ambiente faz toda diferen√ßa no seu evento!

Chame Alexandre para agendar!

Vibra√ß√µes Positivas!""",
                "keywords": ["visita", "conhecer", "ver", "agendar visita"]
            },

            "localizacao": {
                "resposta": """Localiza√ß√£o:

Endere√ßo:
Estrada do Cabungui, 772
(continua√ß√£o da Estrada do Pacu√≠)
Vargem Grande - Rio de Janeiro / RJ

Por que Vargem Grande:
- Energia da natureza √∫nica
- Ambiente tranquilo e familiar
- Localiza√ß√£o no Rio de Janeiro
- Atmosfera especial para eventos

Como chegar:
- Regi√£o de f√°cil acesso
- Estacionamento dispon√≠vel
- Ambiente seguro

Para orienta√ß√µes:
WhatsApp: 21 98124-6196 (Alexandre)

A localiza√ß√£o traz energia especial da natureza!

Quer agendar uma visita?

Vibra√ß√µes Positivas!""",
                "keywords": ["endere√ßo", "onde fica", "localiza√ß√£o", "vargem grande"]
            },

            "horarios": {
                "resposta": """Hor√°rios:

Hor√°rio para eventos:
Das 8h √†s 18h

Disponibilidade:
- Finais de semana: S√°bado OU Domingo
- Apenas um evento por fim de semana
- N√£o fazemos eventos noturnos

Vantagens do nosso hor√°rio:
- Manh√£: Perfeita para ch√°s e eventos matinais
- Tarde: Ideal para almo√ßos e festas
- At√© 18h: Tempo suficiente para celebrar
- Luz natural: Aproveita a beleza do dia

Por que esse hor√°rio:
- Seguran√ßa para fam√≠lias
- Energia positiva da luz natural
- Ambiente familiar
- Foco total no seu evento

Para agendar sua data:
WhatsApp: 21 98124-6196 (Alexandre)

Vibra√ß√µes Positivas!""",
                "keywords": ["horario", "que horas", "funcionamento", "8h", "18h"]
            },

            "capacidade": {
                "resposta": """Capacidade:

Nosso espa√ßo comporta at√© 100 convidados

Estrutura pensada para:
- Festas familiares de todos os tamanhos
- Eventos √≠ntimos ou celebra√ß√µes maiores
- Conforto para todos os convidados
- Ambiente acolhedor

Vantagens da nossa capacidade:
- Tamanho ideal para festas familiares
- Mant√©m ambiente familiar
- Comporta toda fam√≠lia
- Apenas seu evento no dia

Perfeito para:
- Anivers√°rios familiares
- Batizados e ch√°s
- Casamentos √≠ntimos
- Formaturas
- Confraterniza√ß√µes familiares

Para mais detalhes:
WhatsApp: 21 98124-6196 (Alexandre)

Nosso espa√ßo tem o tamanho perfeito!

Vibra√ß√µes Positivas!""",
                "keywords": ["capacidade", "quantas pessoas", "100", "convidados", "comporta"]
            },
            
            "eventos": {
                "resposta": """Tipos de eventos:

Celebra√ß√µes familiares que fazemos:
- Anivers√°rios (adulto e infantil)
- Batizados
- Ch√°s (baby shower, revela√ß√£o, fraldas)
- Formaturas
- Casamentos √≠ntimos
- Confraterniza√ß√µes
- Reuni√µes familiares especiais

Nosso diferencial:
- Apenas um evento por fim de semana
- Hor√°rio: 8h √†s 18h (s√°bado ou domingo)
- Ambiente familiar em Vargem Grande
- Energia da natureza
- At√© 100 convidados

Nossa filosofia:
Unir fam√≠lias para momentos especiais com energia da natureza!

Para planejar seu evento:
WhatsApp: 21 98124-6196 (Alexandre)

Que tipo de festa voc√™ est√° pensando?

Vibra√ß√µes Positivas!""",
                "keywords": ["festa", "evento", "aniversario", "casamento", "celebra√ß√£o"]
            },

            "missao": {
                "resposta": """Nossa miss√£o:

"Unir fam√≠lias e amigos para momentos especiais com a energia da natureza!"

O que isso significa:

Unir fam√≠lias e amigos:
- Ambiente perfeito para conex√µes especiais
- Espa√ßo para fortalecer la√ßos familiares
- Celebra√ß√µes que aproximam pessoas queridas

De forma leve:
- Tranquilidade no ambiente natural
- Das 8h √†s 18h para aproveitar
- Apenas seu evento no fim de semana
- Leveza da natureza de Vargem Grande

Momentos especiais:
- Celebra√ß√µes que ficam na mem√≥ria
- Energia especial do ambiente natural
- Atmosfera √∫nica

Com energia da natureza:
- Localiza√ß√£o em Vargem Grande
- Ambiente natural que renova energias
- Vibra√ß√µes positivas do local

A energia deste ambiente faz diferen√ßa no seu evento!

Converse conosco: 21 98124-6196 (Alexandre)

Vibra√ß√µes Positivas!""",
                "keywords": ["miss√£o", "objetivo", "proposta", "filosofia", "unir familias"]
            }
        }
        
        print(f"‚úÖ Base Janine carregada: {len(KNOWLEDGE_BASE)} categorias")
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar base de conhecimento: {e}")
        KNOWLEDGE_BASE = {}

# Busca resposta especializada
def buscar_resposta_especializada(pergunta):
    try:
        intencao = analisar_intencao(pergunta)
        
        print(f"üéØ Inten√ß√£o detectada: {intencao} para: '{pergunta[:50]}...'")
        
        if intencao in KNOWLEDGE_BASE:
            resposta = KNOWLEDGE_BASE[intencao]["resposta"]
            
            # Para contatar_alexandre, chama a fun√ß√£o din√¢mica
            if intencao == "contatar_alexandre":
                resposta = gerar_resposta_contatar_alexandre(pergunta)
            # Para despedidas e elogios, pode variar
            elif intencao == "despedida":
                resposta = random.choice(DESPEDIDAS)
            elif intencao == "elogio_espaco":
                resposta = random.choice(ELOGIOS_ESPACO_RESPOSTAS)
                
            return resposta
        
        return None
        
    except Exception as e:
        print(f"‚ùå Erro na busca especializada: {e}")
        return None

# Processamento Ollama focado em eventos - MELHORADO E SIMPLIFICADO
def processar_ollama_focado(pergunta, intencao):
    if not verificar_ollama():
        return None
    
    try:
        # Se for pergunta que precisa de Alexandre, n√£o usa Ollama
        if intencao == "contatar_alexandre":
            return gerar_resposta_contatar_alexandre(pergunta)
        
        # Informa√ß√µes do espa√ßo para contexto
        info_espaco = """
ESPA√áO PARA FESTAS FAMILIARES - VARGEM GRANDE:
- Local: Estrada do Cabungui, 772, Vargem Grande - RJ
- Capacidade: At√© 100 convidados
- Hor√°rio: Das 8h √†s 18h (s√°bado OU domingo)
- WhatsApp: 21 98124-6196 (Alexandre)
- Miss√£o: "Unir fam√≠lias e amigos, de forma leve e plena, com a energia da natureza"
- Exclusividade: Apenas um evento por fim de semana
- N√£o fazemos eventos noturnos ou pernoite
"""
        
        # Prompts espec√≠ficos SIMPLIFICADOS
        prompts = {
            "saudacao": "Fa√ßa uma sauda√ß√£o simples como Janine:",
            "despedida": "Fa√ßa uma despedida educada:",
            "sobre_ia": "Explique que voc√™ √© a Janine de forma simples:",
            "sobre_espaco": "Fale sobre o espa√ßo de festas de forma simples:",
            "elogio_ia": "Responda positivamente ao elogio:",
            "elogio_espaco": "Responda ao elogio sobre o espa√ßo:",
            "marcar_evento": "Explique como marcar evento de forma simples, direcionando para WhatsApp:",
            "orcamento": "Responda sobre or√ßamentos de forma simples:",
            "contato": "Forne√ßa informa√ß√µes de contato de forma simples:",
            "visita": "Explique sobre visitas de forma simples:",
            "localizacao": "Forne√ßa a localiza√ß√£o de forma simples:",
            "horarios": "Explique hor√°rios de forma simples:",
            "capacidade": "Explique capacidade de forma simples:",
            "eventos": "Fale sobre tipos de eventos de forma simples:",
            "missao": "Explique nossa miss√£o de forma simples:",
            "geral": "Responda sobre o espa√ßo de forma simples:"
        }
        
        # Verifica se √© pergunta complexa que precisa de Alexandre
        if precisa_contatar_alexandre(pergunta):
            return gerar_resposta_contatar_alexandre(pergunta)
        
        prompt_base = prompts.get(intencao, prompts["geral"])
        
        prompt = f"""Voc√™ √© Janine, assistente do espa√ßo para festas familiares.

{info_espaco}

PERSONALIDADE: Simples, clara, direta, sem palavras dif√≠ceis. Use linguagem f√°cil de entender.

REGRAS IMPORTANTES:
- Use PALAVRAS SIMPLES e FRASES CURTAS
- N√ÉO use palavras complicadas ou t√©cnicas
- Seja DIRETA, sem rodeios
- Sempre termine com "Vibra√ß√µes Positivas!"
- Mencione WhatsApp 21 98124-6196 (Alexandre) quando relevante
- M√°ximo 200 palavras
- Se a pergunta for sobre datas, disponibilidade, pre√ßos espec√≠ficos ou detalhes que voc√™ n√£o sabe, direcione para Alexandre

EXEMPLO DE LINGUAGEM SIMPLES:
‚ùå "estabelecimento com caracter√≠sticas diferenciadas"
‚úÖ "lugar especial"
‚ùå "proporcionar experi√™ncias memor√°veis"  
‚úÖ "fazer festas inesquec√≠veis"

FOCO: {intencao.upper()}

{prompt_base} {pergunta}

Resposta simples e clara:"""

        data = {
            "model": OLLAMA_MODEL,
            "prompt": prompt,
            "stream": False,
            "options": {
                "num_ctx": 2048,
                "num_predict": 200,
                "temperature": 0.2,
                "top_k": 20,
                "top_p": 0.8,
                "repeat_penalty": 1.1,
                "stop": ["</s>", "Human:", "PERGUNTA:", "Usuario:"]
            }
        }
        
        response = requests.post(
            f"{OLLAMA_BASE_URL}/api/generate",
            json=data,
            timeout=20
        )
        
        if response.status_code == 200:
            result = response.json()
            resposta = result.get("response", "").strip()
            
            if resposta and len(resposta) > 15:
                resposta_limpa = limpar_resposta_focada(resposta)
                # Adiciona "Vibra√ß√µes Positivas!" se n√£o tiver
                if "vibra√ß√µes positivas" not in resposta_limpa.lower():
                    resposta_limpa += "\n\nVibra√ß√µes Positivas!"
                return resposta_limpa
        
        return None
        
    except Exception as e:
        print(f"‚ùå Erro Ollama: {e}")
        return None

# Limpeza de resposta melhorada
def limpar_resposta_focada(resposta):
    try:
        # Remove prefixos desnecess√°rios
        prefixos = [
            "Resposta simples:", "Janine:", "Como Janine",
            "RESPOSTA:", "Resposta:", "FOCO:", "Ol√°!", "Oi!"
        ]
        
        for prefixo in prefixos:
            if resposta.startswith(prefixo):
                resposta = resposta[len(prefixo):].strip()
        
        # Limita tamanho
        if len(resposta) > 600:
            corte = resposta[:600]
            ultimo_ponto = corte.rfind('.')
            if ultimo_ponto > 400:
                resposta = resposta[:ultimo_ponto + 1]
        
        return resposta.strip()
        
    except Exception as e:
        print(f"‚ùå Erro na limpeza: {e}")
        return resposta

# Verifica√ß√£o expandida para perguntas relacionadas
def eh_pergunta_festa_focada(pergunta):
    try:
        p = pergunta.lower().strip()
        
        # Sempre aceita sauda√ß√µes, despedidas e elogios
        if len(pergunta) < 50:
            if any(s in p for s in ["oi", "ola", "hey", "bom dia", "boa tarde", "tudo bem"]):
                return True
            if any(d in p for d in ["tchau", "bye", "at√© logo", "obrigado", "valeu"]):
                return True
            if any(e in p for e in ["legal", "bom", "boa", "lindo", "bonito", "incrivel", "top"]):
                return True
        
        # Keywords expandidas incluindo MARCAR EVENTO
        keywords_aceitas = [
            # Marcar evento - NOVA CATEGORIA
            "marcar", "quero", "vou", "preciso", "fazer", "agendar", "reservar",
            "gostaria", "posso", "queria", "tenho interesse", "estou interessado",
            "como fa√ßo", "como marco", "como reservo", "como contrato",
            
            # Sobre a IA
            "janine", "ai", "ia", "voc√™", "quem √©", "o que √©", "para que serve",
            
            # Festas e eventos
            "festa", "evento", "aniversario", "casamento", "batizado", "ch√°", "formatura",
            "celebra√ß√£o", "comemora√ß√£o", "confraterniza√ß√£o", "reuni√£o",
            
            # Servi√ßos
            "or√ßamento", "pre√ßo", "valor", "custo", "visita", "conhecer",
            
            # Localiza√ß√£o e estrutura
            "endere√ßo", "localiza√ß√£o", "hor√°rio", "vargem grande", "cabungui", "pacu√≠",
            "rio de janeiro", "rj", "onde fica", "como chegar",
            
            # Espa√ßo e estrutura
            "espa√ßo", "local", "lugar", "ambiente", "sal√£o", "estrutura", "capacidade",
            "100 pessoas", "convidados", "comporta",
            
            # Hor√°rios
            "horario", "8h", "18h", "manh√£", "tarde", "sabado", "domingo", "fim de semana",
            
            # Contato
            "contato", "whatsapp", "telefone", "alexandre", "falar", "ligar", "chamar",
            
            # Filosofia
            "miss√£o", "energia", "natureza", "vibra√ß√£o", "unir", "fam√≠lia", "familias",
            
            # Fam√≠lia
            "familiar", "fam√≠lia", "familias", "parentes",
            
            # Gerais
            "como", "onde", "quando", "quanto", "qual", "quem", "esse", "isso", "porque",
            
            # DATAS E DISPONIBILIDADE (agora aceita mas direciona para Alexandre)
            "data", "datas", "dispon√≠vel", "livre", "ocupado", "agenda", "calend√°rio"
        ]
        
        # Se tem QUALQUER palavra relacionada, aceita
        if any(keyword in p for keyword in keywords_aceitas):
            return True
            
        return False
        
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o: {e}")
        return True  # Em caso de erro, aceita a pergunta

# Gerador principal melhorado com tratamento de erros
def gerar_resposta_otimizada(pergunta):
    global HISTORICO_CONVERSAS  # Declare explicitamente como global
    
    try:
        # Cache
        pergunta_hash = hashlib.md5(pergunta.lower().strip().encode()).hexdigest()
        
        if pergunta_hash in CACHE_RESPOSTAS:
            return CACHE_RESPOSTAS[pergunta_hash]
        
        # Analisa inten√ß√£o
        intencao = analisar_intencao(pergunta)
        print(f"üéØ Inten√ß√£o: {intencao} para: '{pergunta[:50]}...'")
        
        # Se precisa contatar Alexandre, retorna direto
        if intencao == "contatar_alexandre":
            resposta_alexandre = gerar_resposta_contatar_alexandre(pergunta)
            CACHE_RESPOSTAS[pergunta_hash] = resposta_alexandre
            print("üìû Direcionado para Alexandre")
            return resposta_alexandre
        
        # Busca na base especializada primeiro
        resposta_especializada = buscar_resposta_especializada(pergunta)
        if resposta_especializada:
            CACHE_RESPOSTAS[pergunta_hash] = resposta_especializada
            print("‚úÖ Resposta da base especializada")
            return resposta_especializada
        
        # Tenta Ollama focado
        resposta_ollama = processar_ollama_focado(pergunta, intencao)
        if resposta_ollama:
            CACHE_RESPOSTAS[pergunta_hash] = resposta_ollama
            print("‚úÖ Resposta do Ollama focado")
            return resposta_ollama
        
        # Resposta de fallback melhorada E SIMPLIFICADA
        fallbacks = {
            "saudacao": "Ol√°! Sou a Janine do espa√ßo de festas em Vargem Grande! Como posso ajudar? Vibra√ß√µes Positivas!",
            "despedida": "At√© logo! Fico √† disposi√ß√£o para ajudar com seu evento! Vibra√ß√µes Positivas!",
            "sobre_ia": "Sou a Janine! Ajudo com festas familiares em Vargem Grande. Posso falar sobre or√ßamentos, visitas e eventos! Vibra√ß√µes Positivas!",
            "sobre_espaco": "Nosso espa√ßo em Vargem Grande √© perfeito para festas familiares! At√© 100 pessoas, das 8h √†s 18h. WhatsApp: 21 98124-6196 (Alexandre). Vibra√ß√µes Positivas!",
            "elogio_ia": "Obrigada! Fico feliz em ajudar! Vibra√ß√µes Positivas!",
            "elogio_espaco": "Que bom que gostou! Nosso espa√ßo em Vargem Grande √© muito especial! Vibra√ß√µes Positivas!",
            "marcar_evento": "Que legal! Para marcar sua festa √© f√°cil: Chame Alexandre no WhatsApp 21 98124-6196. Ele vai fazer seu or√ßamento e cuidar de tudo! Vibra√ß√µes Positivas!",
            "orcamento": "Para or√ßamento chame Alexandre no WhatsApp: 21 98124-6196. Cada festa √© √∫nica! Vibra√ß√µes Positivas!",
            "contato": "WhatsApp: 21 98124-6196 (Alexandre). Ele cuida de or√ßamentos e visitas! Vibra√ß√µes Positivas!",
            "visita": "Para visitar nosso espa√ßo chame Alexandre: 21 98124-6196. Voc√™ vai amar a energia do lugar! Vibra√ß√µes Positivas!",
            "localizacao": "Estrada do Cabungui, 772, Vargem Grande - RJ. Um local com energia da natureza! Vibra√ß√µes Positivas!",
            "horarios": "Funcionamos das 8h √†s 18h, s√°bado ou domingo. Apenas um evento por fim de semana! Vibra√ß√µes Positivas!",
            "capacidade": "Nosso espa√ßo √© perfeito para at√© 100 pessoas! Ideal para festas familiares! Vibra√ß√µes Positivas!",
            "eventos": "Fazemos anivers√°rios, batizados, ch√°s, casamentos e formaturas! WhatsApp: 21 98124-6196. Vibra√ß√µes Positivas!",
            "missao": "Nossa miss√£o: Unir fam√≠lias para momentos especiais com a energia da natureza! Vibra√ß√µes Positivas!",
            "contatar_alexandre": "Para essa informa√ß√£o espec√≠fica, fale com Alexandre no WhatsApp: 21 98124-6196. Ele tem todos os detalhes! Vibra√ß√µes Positivas!",
            "geral": "Sou a Janine do espa√ßo de festas em Vargem Grande! Como posso ajudar com seu evento? Vibra√ß√µes Positivas!"
        }
        
        resposta_fallback = fallbacks.get(intencao, fallbacks["geral"])
        
        CACHE_RESPOSTAS[pergunta_hash] = resposta_fallback
        print("‚ö†Ô∏è Resposta fallback melhorada")
        return resposta_fallback
        
    except Exception as e:
        print(f"‚ùå Erro na gera√ß√£o de resposta: {e}")
        return "Para essa informa√ß√£o espec√≠fica, entre em contato com Alexandre no WhatsApp: 21 98124-6196. Ele tem todos os detalhes! Vibra√ß√µes Positivas!"

# Verifica√ß√£o Ollama
def verificar_ollama():
    try:
        response = requests.get(f"{OLLAMA_BASE_URL}/api/tags", timeout=5)
        return response.status_code == 200
    except:
        return False

# ROTAS DA API

@app.route('/health', methods=['GET'])
def health():
    try:
        return jsonify({
            "status": "online_janine_ai",
            "sistema": "Janine AI - Espa√ßo para Festas Familiares",
            "especialidade": "Vargem Grande - Rio de Janeiro",
            "contato": "WhatsApp: 21 98124-6196 (Alexandre)",
            "missao": "Unir fam√≠lias e amigos com energia da natureza",
            "modelo": OLLAMA_MODEL,
            "ollama_ativo": verificar_ollama(),
            "cache_size": len(CACHE_RESPOSTAS),
            "categorias": list(KNOWLEDGE_BASE.keys()) if KNOWLEDGE_BASE else [],
            "funcionalidades": [
                "Sauda√ß√µes e despedidas",
                "Informa√ß√µes sobre Janine",
                "Detalhes sobre o espa√ßo",
                "MARCAR EVENTOS - NOVA FUNCIONALIDADE",
                "DIRECIONAMENTO PARA ALEXANDRE - NOVA FUNCIONALIDADE",
                "Or√ßamentos via WhatsApp",
                "Agendamento de visitas",
                "Localiza√ß√£o em Vargem Grande",
                "Hor√°rios de funcionamento",
                "Capacidade at√© 100 convidados",
                "Tipos de eventos familiares",
                "Miss√£o e filosofia"
            ],
            "info_espaco": {
                "endereco": "Estrada do Cabungui, 772, Vargem Grande - RJ",
                "capacidade": "At√© 100 convidados",
                "horarios": "Das 8h √†s 18h",
                "dias": "S√°bado OU Domingo",
                "exclusividade": "Apenas um evento por fim de semana",
                "whatsapp": "21 98124-6196 (Alexandre)"
            },
            "nova_funcionalidade": {
                "nome": "Direcionamento Inteligente para Alexandre",
                "descricao": "IA detecta perguntas sobre datas, disponibilidade, pre√ßos espec√≠ficos e detalhes t√©cnicos, direcionando automaticamente para contato direto com Alexandre",
                "exemplos": [
                    "Perguntas sobre datas espec√≠ficas",
                    "Disponibilidade de agenda",
                    "Pre√ßos detalhados",
                    "Informa√ß√µes t√©cnicas espec√≠ficas",
                    "Detalhes de contrato"
                ]
            }
        })
    except Exception as e:
        return jsonify({"error": f"Erro no health check: {e}"}), 500

@app.route('/chat', methods=['POST'])
def chat_janine_ai():
    global HISTORICO_CONVERSAS  # Declare explicitamente como global
    
    try:
        data = request.get_json()
        
        if not data or 'message' not in data:
            return jsonify({"error": "Mensagem n√£o fornecida"}), 400
        
        pergunta = data['message'].strip()
        if not pergunta:
            return jsonify({"error": "Mensagem vazia"}), 400
        
        print(f"üí¨ [{datetime.now().strftime('%H:%M:%S')}] Pergunta: {pergunta}")
        
        # Inicializa HISTORICO_CONVERSAS se n√£o existir (failsafe)
        if 'HISTORICO_CONVERSAS' not in globals():
            HISTORICO_CONVERSAS = []
        
        # Filtro para temas relacionados a festas/eventos - SIMPLIFICADO
        if not eh_pergunta_festa_focada(pergunta):
            resposta_filtro = "Ol√°! Sou a Janine do espa√ßo para festas familiares em Vargem Grande! Posso ajudar com: or√ßamentos, visitas, localiza√ß√£o, hor√°rios e tipos de eventos. WhatsApp: 21 98124-6196 (Alexandre). Como posso ajudar com seu evento? Vibra√ß√µes Positivas!"
            return jsonify({
                "response": resposta_filtro,
                "metadata": {
                    "fonte": "filtro_janine_ai", 
                    "tipo": "especialidade_limitada",
                    "sistema": "Janine AI"
                }
            })
        
        # Gera resposta
        resposta = gerar_resposta_otimizada(pergunta)
        
        # Determina fonte
        intencao = analisar_intencao(pergunta)
        if intencao == "contatar_alexandre":
            fonte = "direcionamento_alexandre"
        elif intencao in KNOWLEDGE_BASE:
            fonte = f"base_janine_{intencao}"
        elif verificar_ollama():
            fonte = f"ollama_janine_{intencao}"
        else:
            fonte = f"fallback_janine_{intencao}"
        
        # Hist√≥rico para an√°lise com thread safety
        try:
            with historico_lock:
                HISTORICO_CONVERSAS.append({
                    "timestamp": datetime.now().isoformat(),
                    "pergunta": pergunta,
                    "intencao": intencao,
                    "fonte": fonte,
                    "resposta_size": len(resposta),
                    "direcionado_alexandre": intencao == "contatar_alexandre"
                })
                
                # Limita hist√≥rico
                if len(HISTORICO_CONVERSAS) > 1000:
                    HISTORICO_CONVERSAS = HISTORICO_CONVERSAS[-500:]
        except Exception as hist_error:
            print(f"‚ö†Ô∏è Erro no hist√≥rico: {hist_error}")
        
        return jsonify({
            "response": resposta,
            "metadata": {
                "fonte": fonte,
                "intencao": intencao,
                "modelo": OLLAMA_MODEL,
                "sistema": "Janine AI",
                "especialidade": "Festas Familiares - Vargem Grande",
                "contato": "21 98124-6196 (Alexandre)",
                "direcionado_alexandre": intencao == "contatar_alexandre"
            }
        })
        
    except Exception as e:
        print(f"‚ùå Erro no chat: {e}")
        return jsonify({
            "response": "Para qualquer informa√ß√£o espec√≠fica, entre em contato com Alexandre no WhatsApp: 21 98124-6196. Ele tem todos os detalhes! Vibra√ß√µes Positivas!",
            "error": "erro_temporario"
        }), 500

@app.route('/estatisticas', methods=['GET'])
def estatisticas():
    """Nova rota para estat√≠sticas da Janine"""
    try:
        # Inicializa se n√£o existir
        if 'HISTORICO_CONVERSAS' not in globals() or not HISTORICO_CONVERSAS:
            return jsonify({
                "total_conversas": 0,
                "intencoes": {},
                "message": "Nenhuma conversa registrada ainda"
            })
        
        # An√°lise do hist√≥rico
        intencoes_count = {}
        fontes_count = {}
        alexandre_direcionamentos = 0
        
        with historico_lock:
            for conversa in HISTORICO_CONVERSAS:
                intencao = conversa.get("intencao", "geral")
                fonte = conversa.get("fonte", "unknown")
                
                intencoes_count[intencao] = intencoes_count.get(intencao, 0) + 1
                fontes_count[fonte] = fontes_count.get(fonte, 0) + 1
                
                if conversa.get("direcionado_alexandre", False):
                    alexandre_direcionamentos += 1
            
            ultima_conversa = HISTORICO_CONVERSAS[-1]["timestamp"] if HISTORICO_CONVERSAS else None
            total_conversas = len(HISTORICO_CONVERSAS)
        
        return jsonify({
            "total_conversas": total_conversas,
            "intencoes_populares": dict(sorted(intencoes_count.items(), key=lambda x: x[1], reverse=True)),
            "fontes_utilizadas": fontes_count,
            "direcionamentos_alexandre": alexandre_direcionamentos,
            "percentual_alexandre": f"{(alexandre_direcionamentos/total_conversas*100):.1f}%" if total_conversas > 0 else "0%",
            "sistema": "Janine AI",
            "especialidade": "Festas Familiares - Vargem Grande",
            "ultima_conversa": ultima_conversa,
            "nova_funcionalidade": "Direcionamento inteligente para Alexandre funcionando!"
        })
        
    except Exception as e:
        return jsonify({"error": f"Erro nas estat√≠sticas: {e}"}), 500

@app.route('/ping', methods=['GET'])
def ping():
    return jsonify({
        "status": "pong",
        "timestamp": datetime.now().isoformat(),
        "sistema": "Janine AI - Auto-Ping Ativo",
        "especialidade": "Festas Familiares - Vargem Grande",
        "contato": "WhatsApp: 21 98124-6196 (Alexandre)",
        "funcionalidade": "Direcionamento para Alexandre ativo!"
    })

@app.route('/', methods=['GET'])
def home():
    """Interface web simples para testar a Janine"""
    html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Janine AI - Teste</title>
        <meta charset="utf-8">
        <style>
            body { font-family: Arial; margin: 20px; background: #f0f8ff; }
            .container { max-width: 600px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .header { text-align: center; color: #4a90e2; margin-bottom: 20px; }
            .chat-box { border: 1px solid #ddd; height: 400px; overflow-y: scroll; padding: 10px; margin: 10px 0; background: #fafafa; border-radius: 5px; }
            .input-area { display: flex; gap: 10px; }
            input { flex: 1; padding: 10px; border: 1px solid #ddd; border-radius: 5px; }
            button { padding: 10px 20px; background: #4a90e2; color: white; border: none; border-radius: 5px; cursor: pointer; }
            button:hover { background: #357abd; }
            .message { margin: 10px 0; padding: 10px; border-radius: 5px; }
            .user { background: #e3f2fd; text-align: right; }
            .bot { background: #f1f8e9; }
            .info { font-size: 12px; color: #666; text-align: center; margin: 20px 0; }
            .nova { background: #fff3cd; border: 2px solid #ffc107; padding: 10px; margin: 10px 0; border-radius: 5px; text-align: center; }
            .alexandre { background: #d1ecf1; border: 2px solid #17a2b8; padding: 10px; margin: 10px 0; border-radius: 5px; text-align: center; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>Janine AI</h1>
                <p>Espa√ßo para Festas Familiares - Vargem Grande</p>
                <p><strong>WhatsApp:</strong> 21 98124-6196 (Alexandre)</p>
            </div>
            
            <div class="alexandre">
                <strong>üÜï NOVIDADE!</strong><br>
                A Janine agora detecta automaticamente quando voc√™ precisa falar com Alexandre!<br>
                <strong>Experimente perguntar sobre:</strong><br>
                - "Que datas est√£o dispon√≠veis?"<br>
                - "Quanto custa exatamente?"<br>
                - "Posso marcar para o dia 15?"
            </div>
            
            <div class="nova">
                <strong>FUNCIONALIDADES:</strong><br>
                ‚úÖ Marcar eventos<br>
                ‚úÖ Direcionamento inteligente para Alexandre<br>
                ‚úÖ Respostas sobre o espa√ßo
            </div>
            
            <div id="chat-box" class="chat-box">
                <div class="message bot">
                    Ol√°! Sou a Janine!<br><br>
                    Ajudo com informa√ß√µes sobre nosso espa√ßo para festas familiares em Vargem Grande!<br><br>
                    <strong>Agora com direcionamento inteligente para Alexandre!</strong><br><br>
                    <strong>Vibra√ß√µes Positivas!</strong>
                </div>
            </div>
            
            <div class="input-area">
                <input type="text" id="message-input" placeholder="Pergunte sobre datas, eventos, or√ßamentos..." onkeypress="if(event.key==='Enter') enviarMensagem()">
                <button onclick="enviarMensagem()">Enviar</button>
            </div>
            
            <div class="info">
                <p><strong>Local:</strong> Estrada do Cabungui, 772, Vargem Grande - RJ</p>
                <p><strong>Hor√°rios:</strong> Das 8h √†s 18h (s√°bado ou domingo)</p>
                <p><strong>Capacidade:</strong> At√© 100 convidados</p>
                <p><strong>Eventos:</strong> Anivers√°rios, Batizados, Ch√°s, Casamentos, Formaturas</p>
            </div>
        </div>

        <script>
        async function enviarMensagem() {
            const input = document.getElementById('message-input');
            const chatBox = document.getElementById('chat-box');
            const mensagem = input.value.trim();
            
            if (!mensagem) return;
            
            // Adiciona mensagem do usu√°rio
            chatBox.innerHTML += `<div class="message user"><strong>Voc√™:</strong> ${mensagem}</div>`;
            input.value = '';
            
            try {
                const response = await fetch('/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message: mensagem })
                });
                
                const data = await response.json();
                
                // Adiciona resposta da IA com indicador se foi direcionado para Alexandre
                let responseClass = 'bot';
                if (data.metadata && data.metadata.direcionado_alexandre) {
                    responseClass = 'bot alexandre';
                }
                
                chatBox.innerHTML += `<div class="message ${responseClass}"><strong>Janine:</strong> ${data.response.replace(/\n/g, '<br>')}</div>`;
                
            } catch (error) {
                chatBox.innerHTML += `<div class="message bot"><strong>Janine:</strong> Erro de conex√£o. Para qualquer d√∫vida, chame Alexandre: 21 98124-6196! Vibra√ß√µes Positivas!</div>`;
            }
            
            // Scroll para baixo
            chatBox.scrollTop = chatBox.scrollHeight;
        }
        </script>
    </body>
    </html>
    """
    return render_template_string(html)

# Inicializa√ß√£o
if __name__ == '__main__':
    print("üöÄ Iniciando Janine AI - Espa√ßo para Festas Familiares")
    print("üè† Vargem Grande - Rio de Janeiro")
    print("üì± WhatsApp: 21 98124-6196 (Alexandre)")
    print("‚ú® Vibra√ß√µes Positivas!")
    print()
    
    # Carrega base de conhecimento
    carregar_conhecimento_especializado()
    
    # Configura√ß√£o do servidor
    port = int(os.environ.get('PORT', 5000))
    
    print(f"üåê Servidor iniciado na porta {port}")
    print("ü§ñ Sistema Janine AI online!")
    print("üéØ NOVA FUNCIONALIDADE: Direcionamento para Alexandre ativo!")
    print()
    
    app.run(host='0.0.0.0', port=port, debug=False)
        ia":
                resposta = random.choice(ELOGIOS_IA_RESPOSTAS)
            elif intencao == "elogio_